import bpy
import math
import bmesh

# Initialize lists of tuples

positions = (0,-35,3.7), (0, -20, 3.7), (0, 30, 3.7), (0, 100, 30), (0, 200, 60), (0, 300, 120), (0, 350, 250), (0, 400, 400), (0, 400, 500), (0, 400, 700), (0, 450, 800), (0, 500, 700), (0, 500, 300), (0, 550, 100), (0, 600, 50), (50, 650, 50), (200, 650, 100), (250, 650, 100),(275, 575, 100), (275, 200, 50), (300, 175, 50), (325, 200, 75),(300, 225, 100), (250, 225, 100), (200, 225, 100), (150, 225, 100), (100, 225, 100), (50, 225, 100),(25, 200, 100), (0, 175, 100), (0, 150, 100), (0, 100, 150), (0, 50, 200), (0, 0, 250), (0, 0, 300), (0,0,350), (0,0,400), (0,0,450), (0, 0, 500), (0,0,550), (-10,-10,600), (-20,-20,650), (-30, -30, 650), (-35,-35,650), (-40,-40,675), (-42,-42,675), (-42,-42,675), (-44,-44,675),(-46,-46,675), (-48,-48,675),(-55, -55, 675), (-60, -60, 675), (-90, -90, 675), (-100,-100,675), (-110, -110, 675), (-105, -105, 650), (-100, -100, 625), (-100, -100, 575), (-100, -100, 525), (-100, -100, 100), (-75, -75, 75), (-50, -50, 50), (0, -40, 30), (0, -35, 3.7)


positions_cam = (0,-35,3.7), (0, -20, 3.7), (0, 30, 3.7), (0, 100, 30), (0, 200, 60), (0, 300, 120), (0, 350, 250), (0, 400, 400), (0, 400, 500), (0, 400, 700), (0, 450, 800), (0, 500, 700), (0, 500, 300), (0, 550, 100), (0, 600, 50), (50, 650, 50), (200, 650, 100), (250, 650, 100),(275, 575, 100), (275, 200, 50), (300, 175, 50), (325, 200, 75),(300, 225, 100), (250, 225, 100), (200, 225, 100), (150, 225, 100), (100, 225, 100), (50, 225, 100),(25, 200, 100), (0, 175, 100), (0, 150, 100), (0, 100, 150), (0, 50, 200), (0, 0, 250), (0, 0, 300), (0,0,350), (0,0,400), (0,0,450), (0, 0, 500), (0,0,550), (-10,-10,600), (-20,-20,650), (-30, -30, 650), (-35,-35,650), (-40,-40,675), (-42,-42,675), (-42,-42,675), (-44,-44,675),(-46,-46,675), (-48,-48,675),(-55, -55, 675), (-60, -60, 675), (-90, -90, 675), (-100,-100,675), (-110, -110, 675), (-105, -105, 650), (-100, -100, 625), (-100, -100, 575), (-100, -100, 525), (-100, -100, 100), (-75, -75, 75), (-50, -50, 50), (0, -40, 30), (0, -35, 3.7)

rotations = (90,0,90), (90,0,90), (90,0,90), (90, -15, 90), (90, -30, 90), (90, -45, 90), (90, -60, 90), (90, -90, 90), (90, -90, 90), (90,-90,90), (90, 0, 90), (90, 90, 90), (90, 90, 90), (90, 45, 90), (90, 0, 90), (135, 0, 0), (90, 0, 0), (90, 0, 0), (135, 0, -90), (90, 0, -90), (45, 0, 0), (45, -45,90), (45, 0, 180), (90, 0, 180), (90, 0, 180), (90, 0, 180), (90, 0, 180), (90, 0, 180),(90,0, 225), (90, 0, 270), (90, 0, 270),(90, -30, 270), (90, -60, 270), (90, -90, 270),(180, -90, 270), (270, -90, 270), (360, -90, 270), (450, -90, 270), (540, -90, 270), (630, -90, 270), (720, -90, 270), (810, -90, 270),(900, -75, 225), (990, -75, 225), (1080, -75, 225), (1098, -75, 225), (1116, -75, 225), (1134, -75, 225), (1152, -75, 225), (1170, -75, 225),(1170, -75, 225), (1080, -40, 225), (990, 0, 225), (900, 45, 225), (810, 90, 225),(720, 90, 225), (630, 90, 225), (450, 90, 225),(270, 90, 225),(270, 90, 225), (270, 120, 225), (270, 150, 225), (270, 170, 270), (270, 180, 270)

color = [(0,0,0), (0, 15, 0), (0, 50, 0), (0, 70, 30), (0, 100, 30), (0, 100, 60), (0, 50, 130), (0, 50, 150), (0, 0, 100), (0, 0, 200), (0, 50, 100), (0, 50, -100), (0, 0, -400), (0, 50, -200), (0, 50, -50), (50, 50, 0), (150, 0, 50),(50, 0, 0), (25, -75, 0), (0, -375, -50), (25, -25, 0),(25, 25, 25), (-25, 25, 25), (-50, 0, 0), (-50, 0, 0), (-50, 0, 0), (-50, 0, 0),(-25, -25, 0), (0, -25, 0), (0, -25, 0), (0, -50, 50),(0, -50, 50), (0, -50, 50), (0, 0, 50), (0,0,50), (0,0,50), (0,0,50), (0, 0, 50), (0,0,50), (-10,-10,50), (-10,-10,50), (-10, -10, 0), (-5,-5,0), (-5,-5,25), (-2,-2,0), (-2,-2,0), (-2,-2,0),(-2,-2,0), (-7,-7,0),(-5, -5, 0), (-5, -5, 0), (-30, -30, 0), (-10,-10,0), (-10, -10, 0), (5, 5, -25), (5, 5, -25), (0, 0, -50), (0, 0, -50), (0, 0, -425), (25, 25, -25), (25, 25, -25), (50, 50, -25), (50, 10, -20), (0,0,0)]
#all colors in the 64 frames





# Initialize object references
plane = bpy.data.objects["Plane_Cylinder"] //Assigns the plane to the script
camera = bpy.data.objects["PlaneCamera"] //Assigns the plane camera to the script



# Declare function
def set_keyframes():

    frame_num = 0
    
        
    for index,position in enumerate(positions):
        # gives me back index and value
        bpy.context.scene.frame_set(frame_num)
        
        # Record location coords
        plane.location = position        
        camera.location = positions_cam[index]
        
        # Record rotation angles in XYZ Euler
        plane.rotation_euler = (math.radians(rotations[index][0]), math.radians(rotations[index][1]), math.radians(rotations[index][2]))
        
        # Record keyframes
        plane.keyframe_insert(data_path='location', index=-1)
        plane.keyframe_insert(data_path='rotation_euler', index=-1)
        camera.keyframe_insert(data_path='rotation_euler', index=-1)        
   
        frame_num += 24
        
    pass

def select_color():
    mat = bpy.data.materials.new(name="ColorfulChange") #set new material to variable 
    plane.data.materials.append(mat) #add the material to the object
    plane.active_material = mat #set it as the active material
    frames = [] #empty array list that will later be denoted as all frames within
    for i in range(0, 1536, 24):
       frames.append(i) 
    for f, c in zip(frames, color):
        # Set the material's diffuse color to the current color from the colors list
        mat.diffuse_color = c
        # Insert a diffuse color keyframe at the current frame
        mat.keyframe_insert(data_path='diffuse_color', frame=f, index=-1)
        
        
        
        
def setsamplecamera():
    simon = bpy.data.objects["Camera"] #assign camera to variable
   
    oneposition = (285, 222, 110), (230, 195, 110), (185, 225, 115), (155.433, 231.77, 115), (120, 225, 108), (110, 210, 117.5)
    onerotation = (70, -10, 90), (70, -45, 60), (70, 0, 90), (70, 4.836, 99.215), (80, 0, 90), (70, -20, 90)

    #oneposition and onerotation denote all locations and rotations of camera
    
    frameone = [552, 576, 600, 616, 632, 648]
    
    #all frames
   
    for i in range(len(frameone)):
       
        current_frame = frameone[i] #sets current frame to one in array list
        bpy.context.scene.frame_set(current_frame)
        simon.location = oneposition[i]#sets current location to one in array list
        simon.rotation_euler =  (math.radians(onerotation[i][0]), math.radians(onerotation[i][1]), math.radians(onerotation[i][2])) # Record rotation angles in XYZ Euler
        simon.keyframe_insert(data_path='location', frame = current_frame , index=-1)
        simon.keyframe_insert(data_path='rotation_euler', frame = current_frame , index=-1)
        # Record keyframes

def complexity():
    complex = bpy.data.objects["ComplexCamera"] #assign camera to variable
    
    locations = (22.5, -36, 335), (66.97601, -39.5, 493.67), (87, -25.66, 547.65), (32.2, -23.44, 576.95), (6.88, -44, 618.8), (-0.16956, -53.6, 684.72), (-50.86, -52, 720.8), (-78.7, -49.73608, 710.53217), (-88.3, -46.8, 717.2), (-105.88, -112.53450, 730.4), (-109.43, -106.78, 653.34), (-109.43, -106.78, 618.96)
    
    rotations = (30, 0, 70), (60, 0, 70), (95, 0, 80), (145, 0, 90), (138.886, 0, 84.418), (80, 0, 80.972), (0, 0, 60), (-45, 17, 90), (-45, 0, 60), (0,0,0), (0,0,0), (0,0,0)


    #Location and Rotation denote all locations and rotations of camera
    
    frames = [792, 888, 936, 984, 1080, 1128, 1176, 1202, 1224, 1272, 1365, 1392]
    
    #all frames
   
    for i in range(len(frames)):
       
        current_frame = frames[i] #sets current frame to one in array list
        bpy.context.scene.frame_set(current_frame)
        complex.location = locations[i]#sets current location to one in array list
        complex.rotation_euler =  (math.radians(rotations[i][0]), math.radians(rotations[i][1]), math.radians(rotations[i][2])) # Record rotation angles in XYZ Euler
        complex.keyframe_insert(data_path='location', frame = current_frame , index=-1)
        complex.keyframe_insert(data_path='rotation_euler', frame = current_frame , index=-1)
        # Record keyframes





def main():
    set_keyframes()
    select_color()
    setsamplecamera()
    complexity()
    pass
    
main() 

